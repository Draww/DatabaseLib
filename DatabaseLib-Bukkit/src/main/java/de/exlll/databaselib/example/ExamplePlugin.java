package de.exlll.databaselib.example;

import de.exlll.databaselib.DatabaseLib;
import de.exlll.databaselib.PluginInfo;
import de.exlll.databaselib.submit.BukkitSqlTaskSubmitter;
import de.exlll.databaselib.submit.TaskPriority;
import de.exlll.databaselib.submit.SqlPreparedStatementTask;
import de.exlll.databaselib.submit.configure.PreparationStrategy;
import org.bukkit.plugin.java.JavaPlugin;

import java.sql.*;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.logging.Level;

class ExamplePlugin extends JavaPlugin {

    // Bungee plugins have to extend BungeeSqlTaskSubmitter instead
    public static final class TestSubmitter extends BukkitSqlTaskSubmitter {
        public TestSubmitter(PluginInfo pluginInfo) {
            super(pluginInfo);
        }

        public void getUserNameById(int userId, BiConsumer<String, Exception> callback) {
            String query = "SELECT `user_name` FROM `users` WHERE `user_id` = ?";
            submitPreparedStatementTask(query, preparedStatement -> {
                preparedStatement.setInt(1, userId);
                ResultSet rs = preparedStatement.executeQuery();

                return rs.next() ? rs.getString("user_name") : "";
            }, callback);
        }

        public void insertUser(String userName, Consumer<Exception> callback) {
            String query = "INSERT INTO `users`(user_name) VALUES (?)";

            SqlPreparedStatementTask<Void> task =
                    newPreparedStatementTask(query, preparedStatement -> {
                        preparedStatement.setString(1, userName);
                        preparedStatement.execute();
                    }, callback);

            int returnKeys = Statement.RETURN_GENERATED_KEYS;
            PreparationStrategy<PreparedStatement> strategy =
                    PreparationStrategy.withAutoGeneratedKeys(returnKeys);
            task.setPriority(TaskPriority.HIGH)
                    .setPreparationStrategy(strategy);
            submit(task);
        }

        public void createTable() {
            // get Connection directly
            try (Connection connection = getConnection();
                 Statement stmt = connection.createStatement()) {

                stmt.execute("CREATE TABLE IF NOT EXISTS `users` (" +
                        "`user_id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY," +
                        "`user_name` VARCHAR(32))");
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    @Override
    public void onEnable() {
        PluginInfo pluginInfo = DatabaseLib.fromPlugin(this);

        TestSubmitter submitter = new TestSubmitter(pluginInfo);
        submitter.createTable(); // this call is synchronous!

        submitter.insertUser("User1", exception -> {
            if (exception != null) {
                getLogger().log(Level.SEVERE, "failed to insert user", exception);
            }
        });

        int userId = 1;
        submitter.getUserNameById(userId, (userName, exception) -> {
            if (exception != null) {
                getLogger().log(Level.SEVERE, "failed to get user by id", exception);
            } else {
                String msg = String.format("user with id %d has name %s", userId, userName);
                getLogger().info(msg);
            }
        });
    }
}