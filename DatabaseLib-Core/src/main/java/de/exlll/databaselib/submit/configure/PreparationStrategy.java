package de.exlll.databaselib.submit.configure;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public interface PreparationStrategy {
    /**
     * A strategy object that creates {@code PreparedStatement}s using
     * {@link Connection#prepareStatement(String)}
     *
     * @see Connection#prepareStatement(String)
     */
    PreparationStrategy DEFAULT = Connection::prepareStatement;

    PreparedStatement prepare(Connection connection, String query) throws SQLException;

    /**
     * @param autoGeneratedKeys flag indicating whether auto-generated keys should be returned;
     *                          either {@code Statement.RETURN_GENERATED_KEYS} or
     *                          {@code Statement.NO_GENERATED_KEYS}
     * @return a new strategy object that creates {@code PreparedStatement}s using
     * {@code autoGeneratedKeys} as the second argument for calls to
     * {@link Connection#prepareStatement(String, int)}
     * @see Connection#prepareStatement(String, int)
     */
    static PreparationStrategy withAutoGeneratedKeys(int autoGeneratedKeys) {
        return (connection, query) -> connection.prepareStatement(query, autoGeneratedKeys);
    }

    /**
     * @param columnIndexes an array of column indexes indicating the columns that should
     *                      be returned from the inserted row or rows
     * @return a new strategy object that creates {@code PreparedStatement}s using
     * {@code columnIndexes} as the second argument for calls to
     * {@link Connection#prepareStatement(String, int[])}
     * @throws IllegalArgumentException if no {@code columnIndexes} provided
     * @see Connection#prepareStatement(String, int[])
     */
    static PreparationStrategy withColumnIndexes(int... columnIndexes) {
        if (columnIndexes.length == 0) {
            throw new IllegalArgumentException("no column indexes provided");
        }
        return (connection, query) -> connection.prepareStatement(query, columnIndexes);
    }

    /**
     * @param columnNames an array of column names indicating the columns that
     *                    should be returned from the inserted row or rows
     * @return a new strategy object that creates {@code PreparedStatement}s using
     * {@code columnNames} as the second argument for calls to
     * {@link Connection#prepareStatement(String, String[])}
     * @throws IllegalArgumentException if no {@code columnNames} provided
     * @see Connection#prepareStatement(String, String[])
     */
    static PreparationStrategy withColumnNames(String... columnNames) {
        if (columnNames.length == 0) {
            throw new IllegalArgumentException("no column names provided");
        }
        return (connection, query) -> connection.prepareStatement(query, columnNames);
    }
}
